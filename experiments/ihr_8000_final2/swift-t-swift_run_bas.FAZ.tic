
# Generated by stc version 0.8.3
# date                    : 2020/11/29 09:34:37
# Turbine version         : 1.2.3
# Input filename          : /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift
# Output filename         : /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift-t-swift_run_bas.FAZ.tic
# STC home                : /gpfs/apps/MN4/SWIFTT/1.4.3/stc
# Turbine home            : /apps/SWIFTT/1.4.3/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : false
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift-t-swift_run_bas.FAZ.tic
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py
# stc.stc_home                  : /gpfs/apps/MN4/SWIFTT/1.4.3/stc
# stc.turbine.version           : 1.2.3
# stc.turbine_home              : /apps/SWIFTT/1.4.3/turbine
# stc.version                   : 0.8.3

# Metadata:

# rpath entries
lappend auto_path "/gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py"
package require turbine 1.2.3
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
    global c:i_1
    turbine::allocate_custom c:i_1 integer 1 1 1 1
    turbine::store_integer ${c:i_1} 1
}


proc swift:main {  } {
    turbine::c::log "function: __entry"
    # Var: string u:put_string /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:39:0
    global u:put_string
    # Var: string u:get_string /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:30:0
    global u:get_string
    # Var: location u:ME RENAMED [location:ME] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:start():167:4
    # Var: $string v:emews_root:1 VALUE_OF [string:emews_root]
    # Var: $string v:turbine_output VALUE_OF [string:turbine_output]
    # Var: $string v:resident_work_ranks VALUE_OF [string:resident_work_ranks]
    # Var: $string$[int] v:r_ranks VALUE_OF [string[int]:r_ranks]
    # Var: $string v:executable VALUE_OF [string:executable]
    # Var: $string v:default_xml VALUE_OF [string:default_xml]
    # Var: $string v:t:3:1 VALUE_OF [string:__t:3:1]
    # Var: $string v:t:6:1 VALUE_OF [string:__t:6:1]
    # Var: $string v:ga_parameters_file VALUE_OF [string:ga_parameters_file]
    # Var: $string v:strategy VALUE_OF [string:strategy]
    # Var: $string v:cooling_schedule VALUE_OF [string:cooling_schedule]
    # Var: $string v:t:15 VALUE_OF [string:__t:15]
    # Var: $string v:alias:t:24 VALUE_OF [string:__alias:t:24]
    # Var: $int v:rank VALUE_OF [int:rank]
    # Var: string[int] u:r_ranks /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:17:0
    # Var: $int v:num_variations VALUE_OF [int:num_variations]
    # Var: $int v:num_iterations VALUE_OF [int:num_iterations]
    # Var: $int v:n RENAMED [$int:__v:n]
    # Var: $int v:n:1 RENAMED [$int:__v:n]
    # Var: string u:algo_params RENAMED [string:algo_params] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:start():175:4
    # Var: void t:2:2 RENAMED [void:__t:2] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:start():176:4
    # Var: $string v:code:3:1 VALUE_OF [string:code:3]
    # Var: $boolean v:t:13 VALUE_OF [boolean:__t:13]
    # Var: $void v:t:12 VALUE_OF [void:__t:12]
    # Var: $boolean v:t:20 VALUE_OF [boolean:__t:20]
    # Var: $void v:t:19 VALUE_OF [void:__t:19]
    # Var: $string v:algo_params VALUE_OF [string:algo_params]
    # Var: $location v:ME VALUE_OF [location:ME]
    lassign [ adlb::multicreate [ list s:location 3 3 2 ] [ list container integer string 1 2 3 ] [ list string 1 1 4 ] [ list integer 1 1 5 ] ] u:ME u:r_ranks u:algo_params t:2:2
    turbine::c::log "allocated u:ME=<${u:ME}> u:r_ranks=<${u:r_ranks}> u:algo_params=<${u:algo_params}> t:2:2=<${t:2:2}>"
    turbine::store_string ${u:get_string} "result = eqpy.output_q_get()"
    turbine::store_string ${u:put_string} "\neqpy.input_q.put(\"%s\")\n\"\"\n"
    set v:emews_root:1 [ turbine::getenv_impl "EMEWS_PROJECT_ROOT" ]
    set v:turbine_output [ turbine::getenv_impl "TURBINE_OUTPUT" ]
    set v:resident_work_ranks [ turbine::getenv_impl "RESIDENT_WORK_RANKS" ]
    set v:r_ranks [ turbine::split_impl ${v:resident_work_ranks} "," ]
    turbine::build_rec ${u:r_ranks} ${v:r_ranks} [ list container integer string ] 0 1
    set v:executable [ turbine::argv_get_impl "exe" ]
    set v:default_xml [ turbine::argv_get_impl "settings" ]
    set v:t:3:1 [ turbine::argv_get_impl "nv" "3" ]
    set v:t:6:1 [ turbine::argv_get_impl "ni" "10" ]
    set v:ga_parameters_file [ turbine::argv_get_impl "ga_parameters" ]
    set v:strategy [ turbine::argv_get_impl "st" ]
    set v:cooling_schedule [ turbine::argv_get_impl "cs" ]
    set v:t:15 [ turbine::getenv_impl "PYTHONPATH" ]
    set a:t:24 [ adlb::subscript_container ${u:r_ranks} 0 ]
    set v:alias:t:24 [ turbine::retrieve_string ${a:t:24} CACHED 1 ]
    set v:rank [ turbine::parse_int_impl ${v:alias:t:24} 10 ]
    set v:ME [ dict create "rank" ${v:rank} "accuracy" "RANK" "strictness" "HARD" ]
    turbine::store_struct ${u:ME} ${v:ME} s:location 3
    set v:num_variations [ turbine::parse_int_impl ${v:t:3:1} 10 ]
    set v:num_iterations [ turbine::parse_int_impl ${v:t:6:1} 10 ]
    set v:n [ string length ${v:t:15} ]
    set v:t:13 [ expr { ${v:n} > 0 } ]
    turbine::assert_impl ${v:t:13} "Set PYTHONPATH!"
    set v:n:1 [ string length ${v:emews_root:1} ]
    set v:t:20 [ expr { ${v:n:1} > 0 } ]
    turbine::assert_impl ${v:t:20} "Set EMEWS_PROJECT_ROOT!"
    set v:algo_params [ turbine::sprintf_impl "%d,'%s', '%s', '%s'" ${v:num_iterations} ${v:ga_parameters_file} ${v:strategy} ${v:cooling_schedule} ]
    turbine::store_string ${u:algo_params} ${v:algo_params}
    set v:code:3:1 [ turbine::sprintf_impl "import eqpy\neqpy.init('%s')" "bas_box" ]
    set tcltmp:prio [ turbine::get_priority ]
    adlb::put ${v:rank} [ turbine::adlb_work_type resident_work ] [ list _void_py-argwait ${u:ME} ${t:2:2} ${v:code:3:1} ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:num_variations} ${v:turbine_output} ${u:algo_params} ] ${tcltmp:prio} 1
    adlb::write_refcount_decr ${u:r_ranks} 1
}


proc _void_py-argwait { u:ME t:2:2 v:code:3:1 v:default_xml v:emews_root:1 v:executable v:num_variations v:turbine_output u:algo_params } {
    # Var: $void v:v RENAMED [$void:__v:v]
    turbine::python 1 1 ${v:code:3:1} "\"\""
    turbine::make_void [ list ${t:2:2} ] [ list ]
    turbine::rule [ list ${t:2:2} ] [ list start-chain1 ${u:ME} ${t:2:2} ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:num_variations} ${v:turbine_output} ${u:algo_params} ]
}


proc start-chain1 { u:ME t:2:2 v:default_xml v:emews_root:1 v:executable v:num_variations v:turbine_output u:algo_params } {
    # Var: string t:4:2 RENAMED [string:__t:4] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:start():177:4
    lassign [ adlb::multicreate [ list string 1 1 6 ] ] t:4:2
    turbine::c::log "allocated t:4:2=<${t:4:2}>"
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "f:EQPy_get ${t:4:2} ${u:ME}"
    turbine::reset_priority
    turbine::rule [ list ${t:4:2} ] [ list start-chain2 ${u:ME} ${t:4:2} ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:num_variations} ${v:turbine_output} ${u:algo_params} ]
    turbine::read_refcount_decr ${t:2:2} 1
}


proc start-chain2 { u:ME t:4:2 v:default_xml v:emews_root:1 v:executable v:num_variations v:turbine_output u:algo_params } {
    # Var: void t:5:2 RENAMED [void:__t:5] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:start():178:4
    lassign [ adlb::multicreate [ list integer 1 1 7 ] ] t:5:2
    turbine::c::log "allocated t:5:2=<${t:5:2}>"
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "f:EQPy_put ${t:5:2} ${u:ME} ${u:algo_params}"
    turbine::reset_priority
    turbine::rule [ list ${t:5:2} ] [ list start-chain3 ${u:ME} ${t:5:2} ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:num_variations} ${v:turbine_output} ]
    turbine::read_refcount_decr ${t:4:2} 1
}


proc start-chain3 { u:ME t:5:2 v:default_xml v:emews_root:1 v:executable v:num_variations v:turbine_output } {
    # Var: int c:i_1 OPT_TEMPORARY
    global c:i_1
    # Var: void t:6:2 RENAMED [void:__t:6] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:start():179:6
    lassign [ adlb::multicreate [ list integer 1 1 8 ] ] t:6:2
    turbine::c::log "allocated t:6:2=<${t:6:2}>"
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list loop-forloop-1 1 1 ${c:i_1} ${u:ME} ${t:6:2} ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:num_variations} ${v:turbine_output} ]
    turbine::reset_priority
    turbine::read_refcount_decr ${t:5:2} 1
}


proc loop-forloop-1 { v:xcond:1 v:b u:i u:ME t:6:2 v:default_xml v:emews_root:1 v:executable v:num_variations v:turbine_output } {
    if { ${v:xcond:1} } {
        # Var: string u:params RENAMED [string:params] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():114:4
        # Var: boolean u:c RENAMED [boolean:c] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():115:4
        # Var: int t:19:1 RENAMED [int:__t:19] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():111:18
        lassign [ adlb::multicreate [ list string 1 1 9 ] [ list integer 1 1 10 ] [ list integer 1 1 11 ] ] u:params u:c t:19:1
        turbine::c::log "allocated u:params=<${u:params}> u:c=<${u:c}> t:19:1=<${t:19:1}>"
        turbine::read_refcount_incr ${t:6:2} 2
        turbine::read_refcount_incr ${u:i} 1
        turbine::read_refcount_incr ${u:ME} 4
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "f:EQPy_get ${u:params} ${u:ME}"
        turbine::reset_priority
        turbine::rule [ list ${u:params} ] [ list __entry-async_op-eq_string ${u:ME} ${t:6:2} ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:num_variations} ${v:turbine_output} ${u:c} ${u:i} ${u:params} ]
        turbine::rule [ list ${u:i} ] "__entry-async_op-plus_int ${t:19:1} ${u:i}"
        turbine::rule [ list ${u:c} ] [ list __entry-loop_continue ${u:ME} ${t:19:1} ${t:6:2} ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:num_variations} ${v:turbine_output} ${u:c} ]
    } else {
        turbine::read_refcount_decr ${u:ME} 1
        turbine::read_refcount_decr ${u:i} 1
        turbine::read_refcount_decr ${t:6:2} 1
    }
}


proc __entry-async_op-eq_string { u:ME t:6:2 v:default_xml v:emews_root:1 v:executable v:num_variations v:turbine_output u:c u:i u:params } {
    # Var: $string v:params VALUE_OF [string:params]
    # Var: $boolean v:t:4:1:1 VALUE_OF [boolean:__t:4:1:1]
    set v:params [ turbine::retrieve_string ${u:params} CACHED 1 ]
    set v:t:4:1:1 [ string equal ${v:params} "DONE" ]
    if { ${v:t:4:1:1} } {
        # Var: string u:finals RENAMED [string:finals] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():124:8
        # Var: file u:results_file RENAMED [file:results_file] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():131:27
        # Var: $string v:fname VALUE_OF [string:fname]
        lassign [ adlb::multicreate [ list string 1 1 12 ] ] u:finals
        turbine::c::log "allocated u:finals=<${u:finals}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 0 1 13 ] ] [ list 1 ] ] u:results_file
        turbine::read_refcount_incr ${t:6:2} 1
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "f:EQPy_get ${u:finals} ${u:ME}"
        turbine::reset_priority
        set v:fname [ turbine::sprintf_impl "%s/final_result" ${v:turbine_output} ]
        turbine::set_filename_val ${u:results_file} ${v:fname}
        turbine::rule [ list ${u:finals} ] [ list __entry-call_foreign-write ${t:6:2} ${v:fname} ${u:c} ${u:finals} ${u:results_file} ]
    } else {
        # Var: $boolean v:t:9:1 VALUE_OF [boolean:__t:9:1]
        set v:t:9:1 [ string equal ${v:params} "EQPY_ABORT" ]
        if { ${v:t:9:1} } {
            # Var: string u:why RENAMED [string:why] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():140:8
            lassign [ adlb::multicreate [ list string 1 1 14 ] ] u:why
            turbine::c::log "allocated u:why=<${u:why}>"
            set tcltmp:prio [ turbine::get_priority ]
            turbine::set_priority ${tcltmp:prio}
            adlb::spawn 0 "f:EQPy_get ${u:why} ${u:ME}"
            turbine::reset_priority
            set tcltmp:prio [ turbine::get_priority ]
            turbine::set_priority ${tcltmp:prio}
            adlb::spawn 0 "__entry-call_foreign-printf"
            turbine::reset_priority
            turbine::rule [ list ${u:why} ] "__entry-call_foreign-printf-1 ${t:6:2} ${u:c} ${u:why}"
        } else {
            # Var: string[int] u:results RENAMED [string[int]:results] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():150:8
            # Var: string u:result RENAMED [string:result] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():156:8
            # Var: void t:18:1 RENAMED [void:__t:18] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:loop():158:8
            # Var: $string v:t:1:1:1:1 VALUE_OF [string:__t:1:1:1:1]
            # Var: $int v:t:6:1:1 VALUE_OF [int:__t:6:1:1]
            # Var: $string$[int] v:param_array VALUE_OF [string[int]:param_array]
            lassign [ adlb::multicreate [ list container integer string 1 1 15 ] [ list string 1 1 16 ] [ list integer 1 1 17 ] ] u:results u:result t:18:1
            turbine::c::log "allocated u:results=<${u:results}> u:result=<${u:result}> t:18:1=<${t:18:1}>"
            set tcltmp:prio [ turbine::get_priority ]
            turbine::set_priority ${tcltmp:prio}
            adlb::spawn 0 "f:EQPy_put ${t:18:1} ${u:ME} ${u:result}"
            turbine::reset_priority
            set v:t:1:1:1:1 "${v:emews_root:1}/scripts/summarize_simulation.py"
            set v:t:6:1:1 [ expr { ${v:num_variations} - 1 } ]
            set v:param_array [ turbine::split_impl ${v:params} ";" ]
            set tcltmp:iters [ dict size ${v:param_array} ]
            adlb::write_refcount_incr ${u:results} [ expr { ${tcltmp:iters} } ]
            dict for {v:parameter_iteration v:parameter} ${v:param_array} {
                # Var: file u:summarize_py RENAMED [file:summarize_py] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:run_obj():80:4
                # Var: string[int] u:cell_counts RENAMED [string[int]:cell_counts] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:run_obj():81:4
                # Var: $file v:summarize_py:1 VALUE_OF [file:summarize_py]
                lassign [ adlb::multicreate [ list container integer string 1 1 19 ] ] u:cell_counts
                turbine::c::log "allocated u:cell_counts=<${u:cell_counts}>"
                lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 18 ] ] [ list 0 ] ] u:summarize_py
                set tcltmp:init_rc 1
                set v:summarize_py:1 [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
                turbine::input_file_local v:summarize_py:1 ${v:t:1:1:1:1}
                turbine::store_file ${u:summarize_py} v:summarize_py:1 1
                turbine::rule [ list ${u:cell_counts} ] "string_join-argwait ${v:parameter_iteration} ${u:cell_counts} ${u:results}"
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 0 [ list __entry-call_foreign-printf-2 ${v:parameter} ]
                turbine::reset_priority
                set tcltmp:iterstotal [ expr { max(0,${v:t:6:1:1} - 0 + 1) } ]
                turbine::file_read_refcount_incr ${u:summarize_py} [ expr { ${tcltmp:iterstotal} - 1 } ]
                turbine::read_refcount_incr ${u:i} [ expr { ${tcltmp:iterstotal} + 0 } ]
                adlb::write_refcount_incr ${u:cell_counts} [ expr { ${tcltmp:iterstotal} - 1 } ]
                run_obj-range1:outer ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:parameter} ${v:parameter_iteration} ${v:t:1:1:1:1} ${v:turbine_output} ${u:cell_counts} ${u:i} ${u:summarize_py} 0 ${v:t:6:1:1} 1
                turbine::decr_local_file_refcount v:summarize_py:1
            }
            turbine::rule [ list ${t:18:1} ] "loop-chain6 ${t:18:1} ${u:c}"
            turbine::rule [ list ${u:results} ] "join-argwait ${u:result} ${u:results}"
            adlb::write_refcount_decr ${u:results} 1
        }
    }
    turbine::read_refcount_decr ${u:ME} 1
    turbine::read_refcount_decr ${u:i} 1
    turbine::read_refcount_decr ${t:6:2} 1
}


proc __entry-call_foreign-write { t:6:2 v:fname u:c u:finals u:results_file } {
    # Var: $string v:finals VALUE_OF [string:finals]
    # Var: $file v:results_file VALUE_OF [file:results_file]
    set v:finals [ turbine::retrieve_string ${u:finals} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:results_file [ turbine::create_local_file_ref ${v:fname} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:results_file ${v:finals}
    turbine::store_file ${u:results_file} v:results_file 0
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list loop-chain1 ${t:6:2} ${v:fname} ${u:c} ]
    turbine::reset_priority
}


proc loop-chain1 { t:6:2 v:fname u:c } {
    # Var: $void v:t:7:2 VALUE_OF [void:__t:7:2]
    set v:t:7:2 [ turbine::printf_local "Writing final result to %s" ${v:fname} ]
    turbine::make_void [ list ${t:6:2} ] [ list ]
    turbine::rule [ list ${t:6:2} ] "loop-chain3 ${t:6:2} ${u:c}"
}


proc loop-chain3 { t:6:2 u:c } {
    turbine::store_integer ${u:c} 0
    turbine::read_refcount_decr ${t:6:2} 1
}


proc __entry-call_foreign-printf {  } {
    # Var: $void v:t:11:2 VALUE_OF [void:__t:11:2]
    set v:t:11:2 [ turbine::printf_local "EQPy Aborted" ]
}


proc __entry-call_foreign-printf-1 { t:6:2 u:c u:why } {
    # Var: $string v:why VALUE_OF [string:why]
    # Var: $void v:t:13:2 VALUE_OF [void:__t:13:2]
    set v:why [ turbine::retrieve_string ${u:why} CACHED 1 ]
    set v:t:13:2 [ turbine::printf_local "%s" ${v:why} ]
    turbine::make_void [ list ${t:6:2} ] [ list ]
    turbine::store_integer ${u:c} 0
}


proc string_join-argwait { v:parameter_iteration u:cell_counts u:results } {
    # Var: $string$[int] v:A RENAMED [$string$[int]:__v:A]
    # Var: $string v:s:2 RENAMED [$string:__v:s]
    # Var: $string v:code:3 VALUE_OF [string:code]
    # Var: $string v:output:2 RENAMED [$string:__v:output]
    set v:A [ turbine::enumerate_rec ${u:cell_counts} [ list container string ] 0 1 ]
    set v:s:2 [ turbine::string_join_impl ${v:A} "," ]
    set v:code:3 [ turbine::sprintf_impl "\nimport statistics\n\nx = '%s'.split(',')\nx = \[float(xx) for xx in x\]\n\nif len(x) > 0:\n  res = statistics.mean(x)\nelse: \n  res = 9999999999\n" ${v:s:2} ]
    set v:output:2 [ turbine::python 1 1 ${v:code:3} "str(res)" ]
    turbine::container_insert ${u:results} ${v:parameter_iteration} ${v:output:2} string 1
}


proc __entry-call_foreign-printf-2 { v:parameter } {
    # Var: $void v:t:3:1:1:1 VALUE_OF [void:__t:3:1:1:1]
    set v:t:3:1:1:1 [ turbine::printf_local "custom param %s" ${v:parameter} ]
}


proc run_obj-range1:outer { v:default_xml v:emews_root:1 v:executable v:parameter v:parameter_iteration v:t:1:1:1:1 v:turbine_output u:cell_counts u:i u:summarize_py tcltmp:lo tcltmp:hi tcltmp:inc } {
    if { [ expr { ${tcltmp:lo} > ${tcltmp:hi} } ] } {
        return
    }
    while {1} {
        set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
        if { [ expr { ${tcltmp:itersleft} <= 64 } ] } {
            run_obj-range1:inner ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:parameter} ${v:parameter_iteration} ${v:t:1:1:1:1} ${v:turbine_output} ${u:cell_counts} ${u:i} ${u:summarize_py} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
            return
        } else {
            set tcltmp:skip [ expr { ${tcltmp:inc} * max(64,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
            for { set tcltmp:splitstart [ expr { ${tcltmp:lo} + ${tcltmp:skip} } ] } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
                set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 0 [ list run_obj-range1:outer ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:parameter} ${v:parameter_iteration} ${v:t:1:1:1:1} ${v:turbine_output} ${u:cell_counts} ${u:i} ${u:summarize_py} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc} ]
                turbine::reset_priority
            }
            set tcltmp:hi [ expr { ${tcltmp:lo} + ${tcltmp:skip} - 1 } ]
        }
    }
}


proc run_obj-range1:inner { v:default_xml v:emews_root:1 v:executable v:parameter v:parameter_iteration v:t:1:1:1:1 v:turbine_output u:cell_counts u:i u:summarize_py tcltmp:lo tcltmp:hi tcltmp:inc } {
    for { set v:replication1 ${tcltmp:lo} } { ${v:replication1} <= ${tcltmp:hi} } { incr v:replication1 ${tcltmp:inc} } {
        # Var: $int v:t:10:1:1 VALUE_OF [int:__t:10:1:1]
        set v:t:10:1:1 [ expr { ${v:replication1} + 1 } ]
        turbine::rule [ list ${u:i} ] [ list __entry-async_op-sprintf ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:parameter} ${v:parameter_iteration} ${v:replication1} ${v:t:10:1:1} ${v:t:1:1:1:1} ${v:turbine_output} ${u:cell_counts} ${u:i} ${u:summarize_py} ]
    }
}


proc __entry-async_op-sprintf { v:default_xml v:emews_root:1 v:executable v:parameter v:parameter_iteration v:replication1 v:t:10:1:1 v:t:1:1:1:1 v:turbine_output u:cell_counts u:i u:summarize_py } {
    # Var: $int v:i:1 VALUE_OF [int:i]
    # Var: $string v:instance_dir VALUE_OF [string:instance_dir]
    # Var: $void v:o:2 RENAMED [$void:__v:o] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:make_dir():192:15
    # Var: file u:out RENAMED [file:out] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:run_obj():90:33
    # Var: file u:err RENAMED [file:err] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:run_obj():91:33
    # Var: $string v:model_sh:1 VALUE_OF [string:model_sh]
    # Var: $string v:xml_out VALUE_OF [string:xml_out]
    # Var: $string v:code:1:1 VALUE_OF [string:code:1]
    # Var: $string v:t:14:1 VALUE_OF [string:__t:14:1]
    # Var: $string v:t:16:1:1 VALUE_OF [string:__t:16:1:1]
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 0 1 20 ] [ list file 0 1 21 ] ] [ list 1 1 ] ] u:out u:err
    set v:i:1 [ turbine::retrieve_integer ${u:i} CACHED 1 ]
    set v:instance_dir [ turbine::sprintf_impl "%s/instance_%i_%i_%i/" ${v:turbine_output} ${v:i:1} ${v:parameter_iteration} ${v:t:10:1:1} ]
    turbine::c::log [ list exec: "mkdir" "-p" ${v:instance_dir} [ dict create ] ]
    turbine::exec_external "mkdir" [ dict create ] "-p" ${v:instance_dir}
    set v:xml_out "${v:instance_dir}settings.xml"
    set v:code:1:1 [ turbine::sprintf_impl "\nimport params2xml\nimport json\n\nparams = json.loads('%s')\nparams\['user_parameters.random_seed'\] = '%s'\n\ndefault_settings = '%s'\nxml_out = '%s'\n\nparams2xml.params_to_xml(params, default_settings, xml_out)\n" ${v:parameter} ${v:replication1} ${v:default_xml} ${v:xml_out} ]
    set v:t:14:1 "${v:instance_dir}out.txt"
    turbine::set_filename_val ${u:out} ${v:t:14:1}
    set v:t:16:1:1 "${v:instance_dir}err.txt"
    turbine::set_filename_val ${u:err} ${v:t:16:1:1}
    set v:model_sh:1 "${v:emews_root:1}/scripts/growth_model.sh"
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list python_persist-argwait ${v:code:1:1} ${v:emews_root:1} ${v:executable} ${v:instance_dir} ${v:model_sh:1} ${v:replication1} ${v:t:14:1} ${v:t:16:1:1} ${v:t:1:1:1:1} ${v:xml_out} ${u:cell_counts} ${u:err} ${u:out} ${u:summarize_py} ]
    turbine::reset_priority
}


proc python_persist-argwait { v:code:1:1 v:emews_root:1 v:executable v:instance_dir v:model_sh:1 v:replication1 v:t:14:1 v:t:16:1:1 v:t:1:1:1:1 v:xml_out u:cell_counts u:err u:out u:summarize_py } {
    # Var: $string v:output:1 RENAMED [$string:__v:output]
    set v:output:1 [ turbine::python 1 1 ${v:code:1:1} "'ignore'" ]
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list run_obj-chain2 ${v:emews_root:1} ${v:executable} ${v:instance_dir} ${v:model_sh:1} ${v:replication1} ${v:t:14:1} ${v:t:16:1:1} ${v:t:1:1:1:1} ${v:xml_out} ${u:cell_counts} ${u:err} ${u:out} ${u:summarize_py} ]
    turbine::reset_priority
}


proc run_obj-chain2 { v:emews_root:1 v:executable v:instance_dir v:model_sh:1 v:replication1 v:t:14:1 v:t:16:1:1 v:t:1:1:1:1 v:xml_out u:cell_counts u:err u:out u:summarize_py } {
    # Var: $file v:out RENAMED [$file:__v:out] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:run_model():64:90
    # Var: $file v:err RENAMED [$file:__v:err] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:run_model():64:90
    # Var: $string v:code:2:1 VALUE_OF [string:code:2]
    set tcltmp:init_rc 2
    set v:out [ turbine::create_local_file_ref ${v:t:14:1} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:err [ turbine::create_local_file_ref ${v:t:16:1:1} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: "bash" ${v:model_sh:1} ${v:executable} ${v:xml_out} ${v:emews_root:1} ${v:instance_dir} [ dict create "stdout" ${v:t:14:1} "stderr" ${v:t:16:1:1} ] ]
    turbine::exec_external "bash" [ dict create "stdout" ${v:t:14:1} "stderr" ${v:t:16:1:1} ] ${v:model_sh:1} ${v:executable} ${v:xml_out} ${v:emews_root:1} ${v:instance_dir}
    turbine::store_file ${u:out} v:out 0
    turbine::store_file ${u:err} v:err 0
    set v:code:2:1 [ turbine::sprintf_impl "\nimport get_metrics\n\ninstance_dir = '%s'\n# '30240'\ncount = get_metrics.get_tumor_cell_count(instance_dir)\n" ${v:instance_dir} ]
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list summarize_simulation-app-leaf1 ${v:instance_dir} ${v:t:1:1:1:1} ${u:summarize_py} ]
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list python_persist-argwait-1 ${v:code:2:1} ${v:replication1} ${u:cell_counts} ]
    turbine::reset_priority
    turbine::decr_local_file_refcount v:out
    turbine::decr_local_file_refcount v:err
}


proc summarize_simulation-app-leaf1 { v:instance_dir v:t:1:1:1:1 u:summarize_py } {
    # Var: $file v:summarize_py RENAMED [$file:__v:summarize_py] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:summarize_simulation():68:26
    # Var: $void v:o:1 RENAMED [$void:__v:o] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:summarize_simulation():68:26
    set v:summarize_py [ turbine::retrieve_file ${u:summarize_py} CACHED 1 ]
    turbine::c::log [ list exec: "python" ${v:t:1:1:1:1} ${v:instance_dir} [ dict create ] ]
    turbine::exec_external "python" [ dict create ] ${v:t:1:1:1:1} ${v:instance_dir}
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list run_obj-chain4 ${v:instance_dir} ]
    turbine::reset_priority
}


proc run_obj-chain4 { v:instance_dir } {
    # Var: $void v:o RENAMED [$void:__v:o] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/swift/swift_run_bas.swift:rm_dir():187:13
    turbine::c::log [ list exec: "rm" "-rf" ${v:instance_dir} [ dict create ] ]
    turbine::exec_external "rm" [ dict create ] "-rf" ${v:instance_dir}
}


proc python_persist-argwait-1 { v:code:2:1 v:replication1 u:cell_counts } {
    # Var: $string v:output RENAMED [$string:__v:output]
    set v:output [ turbine::python 1 1 ${v:code:2:1} "str(count)" ]
    turbine::container_insert ${u:cell_counts} ${v:replication1} ${v:output} string 1
}


proc loop-chain6 { t:18:1 u:c } {
    turbine::store_integer ${u:c} 1
    turbine::read_refcount_decr ${t:18:1} 1
}


proc join-argwait { u:result u:results } {
    # Var: $string$[int] v:A:1 RENAMED [$string$[int]:__v:A]
    # Var: $string v:s:1:1 RENAMED [$string:__v:s]
    set v:A:1 [ turbine::enumerate_rec ${u:results} [ list container string ] 0 1 ]
    set v:s:1:1 [ turbine::string_join_impl ${v:A:1} ";" ]
    turbine::store_string ${u:result} ${v:s:1:1}
}


proc __entry-async_op-plus_int { t:19:1 u:i } {
    # Var: $int v:i VALUE_OF [int:i]
    # Var: $int v:t:19:1 VALUE_OF [int:__t:19:1]
    set v:i [ turbine::retrieve_integer ${u:i} CACHED 1 ]
    set v:t:19:1 [ expr { ${v:i} + 1 } ]
    turbine::store_integer ${t:19:1} ${v:t:19:1}
}


proc __entry-loop_continue { u:ME t:19:1 t:6:2 v:default_xml v:emews_root:1 v:executable v:num_variations v:turbine_output u:c } {
    # Var: $boolean v:c:1 VALUE_OF [boolean:c]
    set v:c:1 [ turbine::retrieve_integer ${u:c} CACHED 1 ]
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list loop-forloop-1 ${v:c:1} ${v:c:1} ${t:19:1} ${u:ME} ${t:6:2} ${v:default_xml} ${v:emews_root:1} ${v:executable} ${v:num_variations} ${v:turbine_output} ]
    turbine::reset_priority
    turbine::read_refcount_decr ${u:ME} 1
    turbine::read_refcount_decr ${t:6:2} 1
}


proc f:EQPy_get { u:result u:loc } {
    turbine::c::log "function: EQPy_get"
    # Var: string u:get_string /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:30:0
    global u:get_string
    # Var: $int u:__sfv:loc_rank STRUCT_MEMBER [location:loc] [rank] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:EQPy_get():36:23
    # Var: $string u:__sfv:loc_strictness STRUCT_MEMBER [location:loc] [strictness] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:EQPy_get():36:23
    # Var: $string u:__sfv:loc_accuracy STRUCT_MEMBER [location:loc] [accuracy] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:EQPy_get():36:23
    set u:__sfv:loc_rank [ adlb::struct_lookup ${u:loc} 0 0 1 ]
    set u:__sfv:loc_strictness [ adlb::struct_lookup ${u:loc} 1 0 1 ]
    set u:__sfv:loc_accuracy [ adlb::struct_lookup ${u:loc} 2 1 1 ]
    turbine::rule [ list ${u:get_string} ] "_string_py-argwait {${u:result}}" target ${u:__sfv:loc_rank} strictness ${u:__sfv:loc_strictness} accuracy ${u:__sfv:loc_accuracy} type [ turbine::adlb_work_type resident_work ]
}


proc _string_py-argwait { u:result } {
    # Var: string u:get_string /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:30:0
    global u:get_string
    # Var: $string v:code RENAMED [$string:__v:code]
    # Var: $string v:output RENAMED [$string:__v:output]
    set v:code [ turbine::retrieve_string ${u:get_string} ]
    set v:output [ turbine::python 1 1 ${v:code} "result" ]
    turbine::store_string ${u:result} ${v:output}
}


proc f:EQPy_put { u:v u:loc u:data } {
    turbine::c::log "function: EQPy_put"
    # Var: string u:put_string /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:39:0
    global u:put_string
    # Var: string u:code /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:EQPy_put():45:4
    lassign [ adlb::multicreate [ list string 1 1 22 ] ] u:code
    turbine::c::log "allocated u:code=<${u:code}>"
    turbine::rule [ list ${u:loc} ] "EQPy_put-ann-wait1 ${u:code} {${u:loc}} {${u:v}}"
    turbine::rule [ list ${u:data} ${u:put_string} ] "EQPy_put-async_op-sprintf ${u:code} {${u:data}}"
}


proc EQPy_put-ann-wait1 { u:code u:loc u:v } {
    # Var: $int u:__sfv:loc_rank STRUCT_MEMBER [location:loc] [rank] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:EQPy_put():47:14
    # Var: $string u:__sfv:loc_strictness STRUCT_MEMBER [location:loc] [strictness] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:EQPy_put():47:14
    # Var: $string u:__sfv:loc_accuracy STRUCT_MEMBER [location:loc] [accuracy] /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:EQPy_put():47:14
    set u:__sfv:loc_rank [ adlb::struct_lookup ${u:loc} 0 0 1 ]
    set u:__sfv:loc_strictness [ adlb::struct_lookup ${u:loc} 1 0 1 ]
    set u:__sfv:loc_accuracy [ adlb::struct_lookup ${u:loc} 2 1 1 ]
    turbine::rule [ list ${u:code} ] "_void_py-argwait-1 ${u:code} {${u:v}}" target ${u:__sfv:loc_rank} strictness ${u:__sfv:loc_strictness} accuracy ${u:__sfv:loc_accuracy} type [ turbine::adlb_work_type resident_work ]
}


proc _void_py-argwait-1 { u:code u:v } {
    # Var: $string v:code RENAMED [$string:__v:code]
    # Var: $void v:v RENAMED [$void:__v:v]
    set v:code [ turbine::retrieve_string ${u:code} CACHED 1 ]
    turbine::python 1 1 ${v:code} "\"\""
    turbine::make_void [ list ${u:v} ] [ list ]
}


proc EQPy_put-async_op-sprintf { u:code u:data } {
    # Var: string u:put_string /gpfs/scratch/cns03/cns03363/janina_project/spheroid-tnf-v2-emews/ext/EQ-Py/EQPy.swift:39:0
    global u:put_string
    # Var: $string v:put_string VALUE_OF [string:put_string]
    # Var: $string v:data VALUE_OF [string:data]
    # Var: $string v:code:1 VALUE_OF [string:code]
    set v:put_string [ turbine::retrieve_string ${u:put_string} ]
    set v:data [ turbine::retrieve_string ${u:data} CACHED 1 ]
    set v:code:1 [ turbine::sprintf_impl ${v:put_string} ${v:data} ]
    turbine::store_string ${u:code} ${v:code:1}
}

turbine::defaults
turbine::declare_custom_work_types COASTER resident_work
turbine::init $servers "Swift"
turbine::check_can_execute resident_work
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
adlb::declare_struct_type 17 s:PartialStats [ list "n" integer "mean" float "M2" float ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
lassign [ turbine::declare_globals [ list "u:get_string" "u:put_string" ] [ list [ list string 1 1 23 ] [ list string 1 1 24 ] ] ] u:get_string u:put_string
adlb::add_debug_symbol 1 "__c:i_1" ""
adlb::add_debug_symbol 2 "ME" "swift_run_bas:start():167:4"
adlb::add_debug_symbol 3 "r_ranks" "swift_run_bas:17:0"
adlb::add_debug_symbol 4 "algo_params" "swift_run_bas:start():175:4"
adlb::add_debug_symbol 5 "__t:2:2" "swift_run_bas:start():176:4"
adlb::add_debug_symbol 6 "__t:4:2" "swift_run_bas:start():177:4"
adlb::add_debug_symbol 7 "__t:5:2" "swift_run_bas:start():178:4"
adlb::add_debug_symbol 8 "__t:6:2" "swift_run_bas:start():179:6"
adlb::add_debug_symbol 9 "params" "swift_run_bas:loop():114:4"
adlb::add_debug_symbol 10 "c" "swift_run_bas:loop():115:4"
adlb::add_debug_symbol 11 "__t:19:1" "swift_run_bas:loop():111:18"
adlb::add_debug_symbol 12 "finals" "swift_run_bas:loop():124:8"
adlb::add_debug_symbol 13 "results_file" "swift_run_bas:loop():131:27"
adlb::add_debug_symbol 14 "why" "swift_run_bas:loop():140:8"
adlb::add_debug_symbol 15 "results" "swift_run_bas:loop():150:8"
adlb::add_debug_symbol 16 "result" "swift_run_bas:loop():156:8"
adlb::add_debug_symbol 17 "__t:18:1" "swift_run_bas:loop():158:8"
adlb::add_debug_symbol 18 "summarize_py" "swift_run_bas:run_obj():80:4"
adlb::add_debug_symbol 19 "cell_counts" "swift_run_bas:run_obj():81:4"
adlb::add_debug_symbol 20 "out" "swift_run_bas:run_obj():90:33"
adlb::add_debug_symbol 21 "err" "swift_run_bas:run_obj():91:33"
adlb::add_debug_symbol 22 "code" "EQPy:EQPy_put():45:4"
adlb::add_debug_symbol 23 "get_string" "EQPy:30:0"
adlb::add_debug_symbol 24 "put_string" "EQPy:39:0"
turbine::start swift:main swift:constants
turbine::finalize
